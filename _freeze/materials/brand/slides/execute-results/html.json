{
  "hash": "e345b1a70c4b7b0db22c3805b09e1f02",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Customization<br>and branding\"\nformat:\n  revealjs:\n    theme: [simple, ../../css/slide-styles.scss, brand]\n    title-slide-attributes: \n      data-background-image: ../../img/background-hex-shapes.svg\n      data-background-opacity: \"0.5\"\n      data-background-gradient: \"linear-gradient(30deg, {{< brand color red >}}, {{< brand color cyan >}})\"\n      style: \"text-align: left; right: 10%\"\n      # data-background-color: \"{{< brand color blue >}}\"\n    include-in-header: \n      - text: |\n          <script>\n            if (window.location.search.includes('decktape=true')) {\n              document.documentElement.classList.add('decktape-export');\n            }\n          </script>\n---\n\n\n\n\n# Themes {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## Bootstrap\n\nQuarto uses the popular [Bootstrap](https://getbootstrap.com/) library for HTML structure and CSS styles.\n\n![](img/bootstrap-homepage.png){fig-align=\"center\"}\n\n## Bootstrap {.nostretch}\n\nYou can use [Bootstrap components and classes](https://getbootstrap.com/docs/5.3/getting-started/introduction/) for special styling\n\n. . .\n\n\\ \n\n```{.markdown code-line-numbers=\"false\"}\n[Here's a button](thing.pdf){.btn .btn-primary role=\"button\"}\n\n[Here's another button](thing.pdf){.btn .btn-warning role=\"button\"}\n```\n\n. . .\n\n::: {style=\"text-align: center\"}\nâ†“\n:::\n\n![](img/buttons.png){fig-align=\"center\" width=\"30%\"}\n\n## Bootswatch themes {.scrollable}\n\nQuarto includes 25 themes from [Bootswatch](https://bootswatch.com/):\n\n:::: {.columns style=\"font-size: 0.85em;\"}\n\n::: {.column width=\"33%\"}\n- default\n- cerulean\n- cosmo\n- cyborg\n- darkly\n- flatly\n- journal\n- litera\n- lumen\n:::\n\n::: {.column width=\"33%\"}\n- lux\n- materia\n- minty\n- morph\n- pulse\n- quartz\n- sandstone\n- simplex\n- sketchy\n:::\n\n::: {.column width=\"33%\"}\n- slate\n- solar\n- spacelab\n- superhero\n- united\n- vapor\n- yeti\n- zephyr\n:::\n\n::::\n\n\n## Changing themes\n\nSpecify the custom theme under `theme` in the YAML settings:\n\n````{.yaml filename=\"_quarto.yml\"}\nformat:\n  html:\n    theme:\n      - zephyr\n````\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n1. Go to [bootswatch.com](https://bootswatch.com/) and explore the different themes there (use the top navigation bar).\n2. Preview your site, then try changing different Bootswatch themes in `_quarto.yml`.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_6356aa6f\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# CSS and Sass {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## Theme options\n\nSometimes we want to change theme settings:\n\n- Fonts\n- Colors\n- Aligment\n- Spacing\n\n## Basic theme options\n\nQuarto automatically supports [some common Bootstrap theme options](https://quarto.org/docs/output-formats/html-themes.html#basic-options)\n\n```{.yaml code-line-numbers=\"false\"}\nformat:\n  html: \n    theme: zephyr\n    fontsize: 1.2em\n    linestretch: 1.2\n    linkcolor: \"#32a852\"\n    backgroundcolor: \"#f8f8c4\"\n    mainfont: Comic Sans\n```\n\n## Total control with CSS\n\n## Crash course in CSS {.smaller}\n\n:::: {.columns}\n\n::: {.column}\nHTML elements can have IDs and classes:\n\n```{.html code-line-numbers=\"false\"}\n<h2 id=\"my-section\" class=\"special\">A heading</h2>\n```\n\n- IDs are unique on the page\n  - Shorthand: `#my-section`\n- Classes aren't unique and can be repeated\n  - Shorthand: `.special`\n\n:::\n\n::: {.column}\n```{.css code-line-numbers=\"false\"}\n/* All H2s */\nh2 {\n  color: red;\n}\n\n/* All elements with id my-section */\n/* This includes non H2s */\n#my-section {\n  color: red;\n}\n\n/* All H2s with id my-section */\nh2#mysection {\n  color: red;\n}\n\n/* All elements with class .special */\n.special {\n  font-style: italic;\n}\n\n/* All H2s with class .special */\nh2.special {\n  font-style: italic;\n}\n```\n:::\n\n::::\n\n\n## Nesting {.smaller}\n\n:::: {.columns}\n\n::: {.column}\nHTML elements can be nested inside each other\n\n```{.html code-line-numbers=\"false\"}\n<div id=\"part1\">\n  <h2 id=\"my-section\" class=\"special\">A heading</h2>\n</div>\n\n<div id=\"part2\">\n  <h2 id=\"blah\" class=\"special\">Another heading</h2>\n</div>\n```\n\n:::\n\n::: {.column}\n```{.css code-line-numbers=\"false\"}\n/* All H2s in #part1 */\n#part1 h2 {\n  color: red;\n}\n\n/* All H2s in #part2 */\n#part2 h2 {\n  color: blue;\n}\n```\n:::\n\n::::\n\n## Browser inpsector\n\nExplore HTML and CSS right from your browser!\n\n![](img/inspector-full.png){fig-align=\"center\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n## Browser inpsector\n\nEdit and tinker with styles\n\n![](img/inspector-edit.png){fig-align=\"center\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n## Browser inpsector\n\nSee which rule applies\n\n![](img/inspector-computed.png){fig-align=\"center\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n1. Preview your site\n2. Use the browser inspector to select a heading\n3. Create a CSS style that targets that heading and makes it \n   - red (`color`) and \n   - italic (`font-style`) and \n   - 30px (`font-size`)\n4. TODO\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_7f4ac103\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Sass: CSS, but fancier {.smaller}\n\n```{.css code-line-numbers=\"false\"}\n@import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100..900;1,100..900&display=swap');\n\n/*-- scss:defaults --*/\n\n/* Built-in Bootstrap variables */\n$h2-font-size:          1.6rem !default;\n$headings-font-weight:  500 !default;\n$font-family-sans-serif:  Roboto\n\n/* Your own variables */\n$my-neat-red: #e21818;\n\n/*-- scss:rules --*/\n#quarto-sidebar h2 {\n  font-family: Roboto;\n  color: $my-neat-red;\n\n  /* Magically compiles to #quarto-sidebar h2 a:hover */\n  a:hover {\n    color: #d1c81d;\n  }\n}\n```\n\n## Bootstrap Sass variables\n\nThere are ***so many***\n\n- TODO: Quarto list\n- TODO: Bootstrap directory\n\n\n## Using CSS/Sass with Quarto\n\n:::: {.columns}\n\n::: {.column}\nUse vanilla CSS\n\n```{.yaml code-line-numbers=\"false\"}\nformat:\n  html:\n    css: custom.css\n```\n:::\n\n::: {.column}\nUse Sass\n\n```{.yaml code-line-numbers=\"false\"}\nformat:\n  html:\n    theme:\n      - zephyr\n      - custom.scss\n```\n:::\n\n::::\n\nTODO: Examples from other sites\n\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\nTODO: Create a SCSS file and make a bunch of rules\n\n\n\n\n# Branding {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## CSS is a little inconvenient\n\n::: {.incremental}\n- HTML, slides, and dashboards all use slighlty different underlying HTML\n- No easy way to reuse the colors and typography from your CSS customizations in R and Python plots or in PDF documents\n- Hard to share consistent, resusable themes with others in your organization (or with the world)\n:::\n\n## Style guides\n\n![](img/urban-institute.png){fig-align=\"center\" width=\"100%\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n::: {.footer}\n[Urban Institute Data Visualization Style Guide](https://urbaninstitute.github.io/graphics-styleguide/){target=\"_blank\"}\n:::\n\n## Style guides\n\n![](img/uga.png){fig-align=\"center\" width=\"100%\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n::: {.footer}\n[University of Georgia Brand Style Guide](https://brand.uga.edu/visual-identity/visual-style/#typography){target=\"_blank\"}\n:::\n\n## Style guides\n\n![](img/gsu.png){fig-align=\"center\" width=\"100%\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n::: {.footer}\n[Georgia State University Web Color Guidelines](https://commkit.gsu.edu/website-management/web-color-guidelines/){target=\"_blank\"}\n:::\n\n## Matching style with CSS\n\nYou can recreate styles with CSS ([site](https://aysps.github.io/2024-aysps-dataviz/){target=\"_blank\"}; [custom.scss](https://github.com/aysps/2024-aysps-dataviz/blob/main/custom.scss){target=\"_blank\"})\n\n![](img/ays-dataviz.png){fig-align=\"center\" width=\"100%\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n## \n\n![](img/brand-yml.png){fig-align=\"center\" width=\"50%\"}\n\n::: {style=\"text-align: center; padding-top: 0.5em;\"}\n[Unified branding with a simple YAML file]{style=\"font-size: 1.2em;\"} \n:::\n\n. . .\n\n::: {style=\"text-align: center; padding-top: 1em; font-size: 0.85em;\"}\nCreate reports, apps, dashboards, plots and more that match your organization's brand guidelines with a single `_brand.yml` file.\n:::\n\n::: footer\nLearn more: <https://posit-dev.github.io/brand-yml/>\n:::\n\n## \n\n::: {.fragment}\n[1. Define branding in a single `_brand.yml` file.]{style=\"font-size: 1.5em;\"}\n\n[2. Apply that branding across almost all Quarto formats.]{style=\"font-size: 1.5em;\"} \n\n:::\n\n## `_brand.yml` elements\n\n::: {.incremental}\n- `meta`: Identifying information, name of the company, URLs, etc.\n- `logo`: Files or links to the brandâ€™s logos\n- `color`: Colors in the brand's color palette\n- `typography`: Fonts for different elements\n- `defaults`: Additional context-specific settings\n:::\n\n## `_brand.yml` structure\n\n```{.yaml code-line-numbers=\"1-4|6-11|13-30|32-51|53-72\" filename=\"_brand.yml\"}\nmeta:\n  name: Urban Institute\n  link:\n    home: https://urbaninstitute.github.io/graphics-styleguide/\n\nlogo:\n  images:\n    icon:\n      path: img/urban.png\n      alt: Urban Institute logo\n  small: img/urban-sm.png\n\ncolor:\n  palette:\n    blue: \"#1696d2\"\n    gray-light: \"#d2d2d2\"\n    black: \"#000000\"\n    yellow: \"#fdbf11\"\n    magenta: \"#ec008b\"\n    green: \"#55b748\"\n    gray-dark: \"#5c5859\"\n    red: \"#db2b27\"\n    orange: \"#e88e2d\"\n    white: \"#ffffff\"\n\n  background: white\n  foreground: gray-dark\n  primary: blue\n  secondary: yellow\n  dark: black\n\ntypography:\n  fonts:\n    - family: Lato\n      source: google\n      weight: [400, 700]\n    - family: Jost\n      source: google\n      weight: [400, 700]\n\n  base:\n    family: Lato\n    weight: 400\n\n  headings:\n    family: Jost\n    weight: 700\n\n  link:\n    color: primary\n    decoration: none\n\ndefaults:\n  bootstrap:\n    functions: # string with SCSS functions\n    defaults:  # list of Bootstrap Sass variables to override\n      link-hover-color: $brand-magenta\n    mixins:    # string with SCSS mixins\n    rules: |   # string with SCSS rules\n      #quarto-content h2, #quarto-content h3 {\n          text-transform: uppercase;\n          letter-spacing: 1px;\n      }\n\n      .content .highlight {\n          color: $brand-yellow;\n      }\n\n      .navbar-title {\n          font-family: Jost;\n          font-weight: 700;\n      }\n\n```\n\n## Enabling `_brand.yml` in Quarto\n\n1. Define branding in ` _brand.yml`.\n2. Save in the root directory of your Quarto project.\n\nQuarto will detect the presence of `_brand.yml` and automatically apply the brand to all documents of the supported formats in the project.\n\n## \n\nIf your brand file has a different name or lives in a subdirectory, use the `brand` key.\n\n```{.yaml code-line-numbers=\"4\" filename=\"my-document.qmd\"}\n---\ntitle: \"My neat report\"\nformat: html\nbrand: org_theme.yml\n---\n```\n\n## Disable `_brand.yml`\n\nTo turn off `_brand.yml` for a document, use `brand: false`.\n\n```{.yaml code-line-numbers=\"4\" filename=\"my-document.qmd\"}\n---\ntitle: \"My neat report\"\nformat: html\nbrand: false\n---\n```\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n1. There is a file named `urban_institute.yml`. Rename it to `_brand.yml` and rerender your site. What changes? TODO\n\n2. Modify some of the variables in the `_brand.yml` file and rerender to see how your site changes. Explore [the brand.yml documentation](https://posit-dev.github.io/brand-yml/){target=\"_blank\"} and see what other settings you can adjust.\n\n   TODO You can reset the file by copying and pasting it from [here](https://github.com/posit-dev/quarto-brand-exercises/blob/main/04-exercise.yml).\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_2aa6e62c\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Use `_brand.yml` in markdown\n\nAccess some `_brand.yml` values in Quarto documents with a shortcode\n\n``` {.markdown filename=\"my_document.qmd\"}\n{{{< brand color primary >}}}\n```\n\n::: {.footer}\nLearn more: <https://quarto.org/docs/authoring/brand.html#using-brand-values>\n:::\n\n\n## Use `_brand.yml` in Sass\n\nAccess some `_brand.yml` values with the `$brand-*` prefix\n\n```{.css filename=\"custom-styles.scss\"}\n/*-- scss:rules --*/\n\nh3 {\n  color: $brand-magenta;\n}\n```\n\n::: {.footer}\nLearn more: <https://quarto.org/docs/authoring/brand.html#in-scss>\n:::\n\n## Use `_brand.yml` in R and Python\n\nAccess and apply specific brand elements\n\n::: {.panel-tabset}\n### R\n\n```{.r}\nlibrary(brand.yml)\n\nbrand <- read_brand_yml(\"_brand.yml\")\n\nbrand$color$primary\n#> [1] \"#1696d2\"\n\nbrand$color$palette$yellow\n#> [1] \"#fdbf11\"\n\nbrand$typography$fonts[[1]]$family\n#> [1] \"Lato\"\n```\n\n### Python\n\n```{.python}\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml(\"_brand.yml\")\n\nbrand.color.primary\n```\n:::\n\n\n## Theme helpers\n\nThe {quarto} package contains theme helpers that apply branding to plots\n\n::: {.panel-tabset}\n### R\n\n```{.r}\nlibrary(quarto)\n\nmy_theme <- theme_brand_ggplot2(\"_brand.yml\")\n```\n\n### Python\n\n```{.python}\nfrom quarto import theme_brand_plotnine\n\nmy_theme = theme_brand_plotnine('_brand.yml')\n```\n\n:::\n\n::: {.aside}\nDoesn't do much (yet) beyond using the brand's `background` and `foreground` colors in the plot\n:::\n\n::: {.footer}\n[R + {ggplot2}](https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html) and [Python + plotnine](https://github.com/quarto-dev/quarto-python?tab=readme-ov-file#theme-helpers) documentation\n:::\n\n## Example plot\n\n```{.r}\nlibrary(tidyverse)\nlibrary(brand.yml)\n\nbrand <- read_brand_yml(\"_brand.yml\")\n\nbrand_theme <- quarto::theme_brand_ggplot2(\"_brand.yml\") +\n  theme(\n    text = element_text(family = brand$typography$fonts[[1]]$family, size = 11)\n  )\n\nggplot(mpg, aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  labs(title = \"A plot\") +\n  scale_color_manual(\n    values = c(\n      brand$color$palette$blue,\n      brand$color$palette$black,\n      brand$color$palette$yellow\n    )\n  ) +\n  brand_theme\n```\n\n##\n\n![](img/unnamed-chunk-1-1.png)\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n1. In the first code chunk of `01-exercise.qmd`, replace `theme_minimal()` with `theme_brand_ggplot2()`. You will need to supply a brand file path (`\"_brand.yml\"`). TODO\n\n2. Re-render and see what changes. \n\n3. Change the `foreground` and `background` colors in `_brand.yml` and rerun the code to create the plot. What changes?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_528c1cc0\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n1. In `01-exercise.qmd`, read in `_brand.yml` with `read_brand_yml()` from the {brand.yml} package. Store it as a variable named `brand`. TODO\n\n2. Change the color of the points to the brand's `blue` color and the line to the brand's `magenta` color. You'll use code that looks something like this:\n\n   ```{.r code-line-numbers=\"false\"}\n   geom_line(color = brand$color$palette$black)\n   ```\n\n3. **Bonus task!** Map a variable from the dataset to the color aesthetic and change the legend to use colors from the brand.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e3ad4b58\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Make your own `_brand.yml`\n\n- In RStudio, go to File \\> New File \\> Text file\n- In Positron or VS Code, use the Explorer panel to add a new file.\n\nSave the file as `_brand.yml`\n\n. . .\n\n\\ \n\nOr create a [Brand Extension](https://quarto.org/docs/extensions/brand.html){target=\"_blank\"} for sharing and distributing your brand\n\n## Don't reinvent the wheel!\n\n**DO NOT** try to write a `_brand.yml` from scratch! \n\nLook at [the \"Inspiration\" page](https://posit-dev.github.io/brand-yml/inspiration/)!\n\n![](img/brand-inspiration.png){fig-align=\"center\" width=\"100%\" style=\"box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;\"}\n\n::: footer\nLearn more: <https://posit-dev.github.io/brand-yml/inspiration/>\n:::\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\nCreate a brand file for yourself, your project, or your organization.\n\nDon't try to do this from scratch! Use these resources:\n\n- [The brand.yml documentation](https://posit-dev.github.io/brand-yml/){target=\"_blank\"}\n- [The brand.yml inspiration page](https://posit-dev.github.io/brand-yml/inspiration/){target=\"_blank\"}\n- [This site's `_brand.yml`](https://github.com/andrewheiss/quarto-websites_2025-10/blob/main/_brand.yml){target=\"_blank\"}\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_da607a10\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# What's next? {background-color='{{< brand color yellow >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## Course outline\n\n- âœ… ~~Intro to Quarto~~\n- âœ… ~~Creating basic websites~~\n- âœ… ~~Advanced website features~~\n- âœ… ~~Publishing~~\n- âœ… ~~Customization and branding~~\n- Interactivity\n\n# Break! {background-color='{{< brand color pink >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}