{
  "hash": "fc4e63a8c080e99b8696440f6b620a65",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Customization<br>and branding\"\nformat:\n  revealjs:\n    theme: [simple, ../../css/slide-styles.scss, brand]\n    title-slide-attributes: \n      data-background-image: ../../img/background-hex-shapes.svg\n      data-background-opacity: \"0.5\"\n      data-background-gradient: \"linear-gradient(30deg, {{< brand color red >}}, {{< brand color cyan >}})\"\n      style: \"text-align: left; right: 10%\"\n      # data-background-color: \"{{< brand color blue >}}\"\n    include-in-header: \n      - text: |\n          <script>\n            if (window.location.search.includes('decktape=true')) {\n              document.documentElement.classList.add('decktape-export');\n            }\n          </script>\n---\n\n\n\n# Themes {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## Bootstrap\n\nQuarto uses the popular [Bootstrap](https://getbootstrap.com/) library for HTML structure and CSS styles.\n\n![](img/bootstrap-homepage.png){fig-align=\"center\"}\n\n## Bootstrap {.nostretch}\n\nYou can use [Bootstrap components and classes](https://getbootstrap.com/docs/5.3/getting-started/introduction/) for special styling\n\n. . .\n\n\\ \n\n```{.markdown code-line-numbers=\"false\"}\n[Here's a button](thing.pdf){.btn .btn-primary role=\"button\"}\n\n[Here's another button](thing.pdf){.btn .btn-warning role=\"button\"}\n```\n\n. . .\n\n::: {style=\"text-align: center\"}\n↓\n:::\n\n![](img/buttons.png){fig-align=\"center\" width=\"30%\"}\n\n## Bootswatch themes {.scrollable}\n\nQuarto includes 25 themes from [Bootswatch](https://bootswatch.com/):\n\n:::: {.columns style=\"font-size: 0.85em;\"}\n\n::: {.column width=\"33%\"}\n- default\n- cerulean\n- cosmo\n- cyborg\n- darkly\n- flatly\n- journal\n- litera\n- lumen\n:::\n\n::: {.column width=\"33%\"}\n- lux\n- materia\n- minty\n- morph\n- pulse\n- quartz\n- sandstone\n- simplex\n- sketchy\n:::\n\n::: {.column width=\"33%\"}\n- slate\n- solar\n- spacelab\n- superhero\n- united\n- vapor\n- yeti\n- zephyr\n:::\n\n::::\n\n\n## Changing themes\n\nSpecify the custom theme under `theme` in the YAML settings:\n\n````{.yaml filename=\"_quarto.yml\"}\nformat:\n  html:\n    theme:\n      - zephyr\n````\n\n## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n1. Go to [bootswatch.com](https://bootswatch.com/) and explore the different themes there (use the top navigation bar).\n2. Preview your site, then try changing different Bootswatch themes in `_quarto.yml`.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_8436d4db\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">07</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n# CSS and Sass {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## Theme options\n\nSometimes we want to change theme settings though\n\nMany common basic options: https://quarto.org/docs/output-formats/html-themes.html#basic-options\n\n## Total control with CSS\n\n## Crash course in CSS\n\nHTML elements can have IDs and classes\n\nHTML elements can be nested inside each other\n\nYou can target HTML elements with different degrees of specificity:\n\n- All \\<h3\\> headings\n\n- H3 headings with the class `neato`\n\n- \\<a>\\ links that are inside a div with the id `quarto-sidebar`\n\n## Browser inpsector\n\nExplore and edit any HTML and CSS right from your browser.\n\n## Sass: CSS, but fancier\n\nvariables\n\nrules that use variables\n\n## Combining CSS and themes\n\nasdf\n\n## Your turn\n\nCreate a SCSS file and make a bunch of rules\n\n\n# Branding {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## CSS is a little inconvenient\n\n- Doesn't play well across HTML outputs - HTML, slides, and dashboards all use slighlty different underlying HTML\n- No easy way to reuse the colors and typography from your CSS customizations in R and Python plots or in PDF documents\n- Hard to share consistent, resusable themes with others in your organization (or with the world)\n\n## Style guides\n\nOrganizations and projects generally have style guides for consistency\n\nUrban Institute\n\nThis course! See the colophon\n\n## \n\n![](img/brand-yml.png){fig-align=\"center\" width=\"50%\"}\n\n[Unified branding with a simple YAML file]{style=\"font-size: 1.2em;\"} \n\n. . .\n\n<br>\n\nCreate reports, apps, dashboards, plots and more that match your company’s brand guidelines with a single `_brand.yml` file.\n\n::: notes\nbrand.yml is a simple, portable YAML file that codifies your company’s brand guidelines into a format that can be used by Quarto, Python and R tooling to create branded outputs. Our goal is to support unified, branded theming for all of Posit’s open source tools—from web applications to printed reports to dashboards and presentations—with a consistent look and feel.\n:::\n\n::: footer\nLearn more: <https://posit-dev.github.io/brand-yml/>\n:::\n\n## \n\n::: r-fit-text\nBranding can be frustrating\n:::\n\n. . .\n\n:::r-fit-text\nBut brand.yml makes it easier\n:::\n\n## \n\n::: {.fragment}\n[1. Define branding in a single `_brand.yml` file.]{style=\"font-size: 1.5em;\"}\n\n[2. Apply that branding across almost all Quarto formats.]{style=\"font-size: 1.5em;\"} \n\n:::\n\n<br>\n\n::: {.fragment}\n\n`brand.yml` also works with Shiny!\n\n:::\n\n## \n\n::: {style=\"--mermaid-max-height: 600px\"}\n```{mermaid}\n---\nconfig:\n  look: handDrawn\n  theme: neutral\n---\nflowchart LR\n    by{brand.yml}\n    by-->quarto[Quarto]\n    quarto-->quarto-html\n    quarto-->quarto-pdf\n    quarto-html-->quarto-websites[Websites]\n    quarto-html-->quarto-presentations[Presentations]\n    quarto-html-->quarto-dashboards[Dashboards]\n    quarto-html-->quarto-emails[Emails]\n    quarto-pdf-->quarto-typst[Typst]\n\n    by-->R\n    R-->r-bslib[\"{bslib}\"]\n    r-bslib-->r-thematic[\"{thematic}\"]\n    r-bslib-->r-shiny[\"Shiny for R\"]\n    r-bslib-->r-rmd[\"R Markdown\"]\n    r-bslib-->r-pkgdown[\"pkgdown\"]\n    %% r-thematic-->r-ggplot2[\"{ggplot2}\"]\n    %% r-thematic-->r-plot[\"{plot}\"]\n\n    by-->Python\n    Python-->py-brand_yml[\"brand_yml\"]\n    py-brand_yml-->py-shiny[Shiny for Python]\n    py-brand_yml-->py-plots[seaborn, matplotlib, etc.]\n\n    classDef implemented fill:#8CE3A0,stroke:#0A2911,color:#0A2911;\n    classDef partial fill:#A8E5B9,stroke:#4B8A5D,color:#0A2911;\n    classDef in-progress fill:#B3D7FF,stroke:#00254D,color:#00254D;\n    classDef highlighted fill:#FFE8DB,stroke:#612200,color:#612200;\n\n    class quarto-websites,quarto-presentations,quarto-dashboards,quarto-typst,py-brand_yml,py-shiny,r-bslib,r-shiny,r-rmd,r-pkgdown implemented;\n    class r-thematic,py-plots partial;\n    class by highlighted;\n\n    click quarto href \"https://prerelease.quarto.org/docs/authoring/brand.html\"\n    click quarto-typst href \"https://quarto.org/docs/output-formats/typst.html\" \"Typst in Quarto\"\n    click quarto-presentations href \"https://quarto.org/docs/presentations/revealjs/\" \"Reveal.js in Quarto\"\n    click quarto-dashboards href \"https://quarto.org/docs/dashboards/\" \"Dashboards in Quarto\"\n    click r-shiny href \"https://shiny.posit.co/\"\n    click r-bslib href \"https://rstudio.github.io/bslib/\"\n    click r-thematic href \"https://rstudio.github.io/thematic/\"\n    click r-ggplot2 href \"https://ggplot2.tidyverse.org/\"\n    click r-rmd href \"https://rmarkdown.rstudio.com/\"\n    click py-shiny href \"https://shiny.posit.co/py/\"\n    click py-brand_yml href \"pkg/py/\"\n```\n:::\n\n<style>\n.mermaid-js {\n  max-height: var(--mermaid-max-height);\n}\n.mermaid-js .nodeLabel {\n  color: var(--bs-black) !important;\n  font-weight: 500;\n}\n.implemented {\n  background-color: #8CE3A0;\n  border-color: #0A2911;\n  color: #0A2911;\n  padding-inline: 0.2rem\n}\n\n.in-progress {\n  background-color: #B3D7FF;\n  border-color: #00254D;\n  color: #00254D;\n  padding-inline: 0.2rem\n}\n</style>\n\n::: footer\nLearn more: <https://posit-dev.github.io/brand-yml/>\n:::\n\n::: notes\nbrand.yml works with a variety of open source projects, including all the Quarto outputs we'll talk about today. as well as Shiny for R and Shiny for Python. This means you can define your organization's branding in a brand.yml file once, and then apply it all over relatively effortlessly. \n\nover the course of this workshop, we'll use the same brand file to apply to all our outputs\n:::\n\n## brand.yml elements\n\n::: incremental\n* `meta`: Identifying information, name of the company, URLs, etc.\n* `logo`: Files or links to the brand’s logos.\n* `color`: Colors in the brand's color palette. \n* `typography`: Fonts for different elements. \n* `defaults`: Additional context-specific settings.\n:::\n\n## `_brand.yml` structure\n\n```{.yaml code-line-numbers=\"1-4|6-11|13-27|29-42\" filename=\"_brand.yml\"}\nmeta:\n  name: World Happiness Report\n  link:\n    home: https://www.worldhappiness.report/\n\nlogo:\n  images:\n    icon:\n      path: images/whr_logo.png\n      alt: World Happiness Report icon.\n  small: images/whr_logo.png\n\ncolor:\n  palette:\n    dark-purple: \"#93358c\"\n    light-purple: \"#f8f6fb\"\n    teal: \"#04afaf\"\n    dark-blue: \"#086992\"\n    hot-pink: \"#eb068c\"\n    light-blue: \"#1aade4\"\n\n  background: light-purple\n  foreground: black\n  primary: dark-purple\n  secondary: hot-pink\n  tertiary: light-blue\n  dark: black\n\ntypography:\n  fonts:\n    - family: Libre Franklin\n      source: google\n      weight: [400, 700]\n\n  base:\n    family: Libre Franklin\n    weight: 400\n\n  headings:\n    family: Libre Franklin\n    weight: 700\n    color: dark-purple\n\n  link:\n    color: primary\n    decoration: none\n```\n\n::: notes\n\ndefine your brand’s color palette and map your palette to the roles colors play. the semantic colors -- primary, foreground, etc\n\nif this seems like a lot of details, don't worry! we will show you how to make your own file later. for now, it's enough to just have a general understanding of the different parts\n:::\n\n## How to apply brand.yml to Quarto\n\n1. Define branding in ` _brand.yml`.\n2. Save in the root directory of your Quarto project.\n\nQuarto will detect the presence of `_brand.yml` and automatically apply the brand to all documents of the supported formats in the project.\n\n## \n\nIf your brand file has a different name or lives in a subdirectory, use the `brand` key.\n\n```{.yaml code-line-numbers=\"5\" filename=\"my-document.qmd\"}\n---\ntitle: \"World Happiness Report\"\nsubtitle: \"Happiness Trends and Contributing Factors (2011-2024)\"\nformat: html\nbrand: org_theme.yml\n---\n```\n\n::: notes\nuse this if you have a file named something other than brand.yml or it lives elsewhere. \n:::\n\n## Disable brand.yml\n\nTo turn off brand.yml for a document, use `brand: false`.\n\n```{.yaml code-line-numbers=\"5\" filename=\"my-document.qmd\"}\n---\ntitle: \"World Happiness Report\"\nsubtitle: \"Happiness Trends and Contributing Factors (2011-2024)\"\nformat: html\nbrand: false\n---\n```\n\n\n## `brand` shortcode \n\nAccess some brand.yml values with a shortcode.\n\n``` {.markdown filename=\"my_document.qmd\"}\n{{{< brand color primary >}}}\n```\n\n::: footer\nLearn more: <https://quarto.org/docs/authoring/brand.html#using-brand-values>\n:::\n\n\n\n## Your turn {background-color='{{< brand color yellow >}}'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_88745c92\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## What about plots?\n\n\n::: notes\nThe plots, at least for the R version, are unbranded. how can we apply brand.yml to plots too?\n:::\n\n\n## Theme helpers\n\nThe quarto packages contain theme helpers that apply branding to plots. \n\n::: {.panel-tabset}\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quarto)\n\nmy_theme <- theme_brand_ggplot2(\"_brand.yml\")\n```\n:::\n\n\n### Python\n\n```{.python}\n#| eval: false\n#| echo: true\nfrom quarto import theme_brand_plotnine\n\nmy_theme = theme_brand_plotnine('_brand.yml')\n```\n\n:::\n\n::: aside\nR: [https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html](https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html)\n\n\nPython: [https://github.com/quarto-dev/quarto-python?tab=readme-ov-file#theme-helpers](https://github.com/quarto-dev/quarto-python?tab=readme-ov-file#theme-helpers)\n:::\n\n::: notes\nThere are other theme helpers for other plotting libraries\n:::\n\n\n\n## Your turn {background-color='{{< brand color yellow >}}'}\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_e6aba989\" data-warn-when=\"60\" data-update-every=\"1\" data-play-sound=\"true\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n::: notes\nThe R function applies theme_minimal().\n:::\n\n## brand.yml packages\n\nAccess and apply specific brand elements. \n\n::: {.panel-tabset}\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(brand.yml)\n\nbrand <- read_brand_yml(\"_brand.yml\")\n\nbrand$color$primary\n```\n:::\n\n\n### Python\n\n```{.python}\n#| eval: false\n#| echo: true\nfrom brand_yml import Brand\n\nbrand = Brand.from_yaml(\"_brand.yml\")\n\nbrand.color.primary\n```\n:::\n\n\n# Templates {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n\n# What's next? {background-color='{{< brand color yellow >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n## Course outline\n\n- ✅ ~~Intro to Quarto~~\n- ✅ ~~Creating basic websites~~\n- ✅ ~~Advanced website features~~\n- ✅ ~~Publishing~~\n- ✅ ~~Customization and branding~~\n- Interactivity\n\n# Break! {background-color='{{< brand color pink >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}