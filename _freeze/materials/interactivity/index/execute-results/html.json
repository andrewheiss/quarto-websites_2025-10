{
  "hash": "45f8ead04e873aff7e6a089c3bae933a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Interactivity\"\ncode-fold: true\nformat: live-html\nengine: knitr\nwebr:\n  packages:\n    - dplyr\n    - palmerpenguins\n    - ggplot2\n    - tidyr\n---\n\n\n::: {.cell}\n\n:::\n\n\n\n## Slides\n\n<p style=\"line-height: 2.5\"><a class=\"btn btn-success btn-sm\" target=\"_blank\" href=\"slides.html\">{{< fa arrow-up-right-from-square >}} &ensp;Open slides in new window</a> <a class=\"btn btn-success btn-sm\" target=\"_blank\" href=\"slides.pdf\" role=\"button\">{{< fa file-pdf >}} &ensp;Download PDF of slides</a></p>\n\n```{=html}\n<div class=\"ratio ratio-16x9\">\n<iframe class=\"slide-deck\" src=\"slides.html\" style=\"border: 1px solid #343a40;\"></iframe>\n</div>\n```\n\n## Exercises\n\n### {plotly} and {ggiraph}\n\n::: {.callout-tip collapse=\"true\"}\n#### Our turn\n\nTogether we'll make some plots with `plotly::ggplotly()` and `ggiraph::girafe()`\n\nI'll post all the final code on the course website when we're done.\n\n:::\n\n\n### Dashboards\n\n::: {.callout-tip collapse=\"true\"}\n#### Our turn\n\nTogether we'll make an interactive dashboard about the [Palmer Penguins](https://allisonhorst.github.io/palmerpenguins/articles/intro.html).\n\nI'll post all the final code on the course website when we're done.\n\n:::\n\n\n### webR\n\n::: {.callout-tip collapse=\"true\"}\n#### Our turn\n\nTogether we'll do this:\n\n1. Create a {webr} chunk that helps teach something and provides feedback\n2. Recreate the [Shiny k-means example](https://shiny.posit.co/r/gallery/start-simple/kmeans-example/)\n3. **Bonus**: Make a live ggplot plot!\n\nI'll post all the final code on the course website when we're done.\n\n:::\n\n\n## Code examples\n\n### {plotly} and {ggiraph}\n\nFinished \"our turn\" code will go here\n\n\n### Dashboards\n\nFinished \"our turn\" code will go here\n\n\n### Quarto Live\n\nFinished \"our turn\" code will go here\n\n\n## Replicated Shiny example!\n\n### With OJS\n\n::: {.callout-warning}\nThis required hours of fighting with Claude and it is so janky and awful\n:::\n\nThis is R code that sends the `faithful` data to OJS:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nojs_define(faithful = faithful)\n```\n:::\n\n\nThis is OJS code for making input options:\n\n```{ojs}\nviewof nbins = Inputs.select(\n  [10, 20, 35, 50],\n  {label: \"Number of bins\"}\n)\n\nviewof individual_obs = Inputs.checkbox([\"Show individual observations\"], {\n  value: []\n})\n\nviewof density = Inputs.checkbox([\"Show density estimate\"], {\n  value: []\n})\n\nviewof bw_adjust = Inputs.range([0.2, 2], {\n  label: \"Bandwidth adjustment:\",\n  step: 0.2,\n  value: 1\n})\n```\n\nThis is OJS code for plotting the data:\n\n```{ojs}\nfaithful_js = transpose(faithful)\n\nPlot.plot({\n  height: 300,\n  y: { label: \"Density\" },\n  x: { label: \"Duration (minutes)\" },\n  marks: [\n    // Probability-based histogram\n    Plot.rectY(\n      faithful_js,\n      Plot.binX(\n        { y: (bin, { x1, x2 }) => bin.length / faithful_js.length / (x2 - x1) }, // Normalize to probability density\n        { x: \"eruptions\", thresholds: nbins } // Use nbins for threshold count\n      )\n    ),\n\n    // Zero line\n    Plot.ruleY([0]),\n\n    // Individual observations\n    // Individual observations (separate layer for ticks)\n    individual_obs.length > 0\n      ? Plot.dot(faithful_js, {\n          x: \"eruptions\",\n          y: (d) => jitter(d.eruptions, 0.05), // Deterministic jitter based on data\n          // y: () => Math.random() * 0.05, // Jitter points randomly along the y-axis\n          stroke: \"white\",\n          fill: \"red\",\n        })\n      : null,\n\n    // Density line\n    density.length > 0\n      ? Plot.line(\n          densityEstimate(\n            faithful_js.map((d) => d.eruptions),\n            bw_adjust // Bandwidth adjustment\n          ),\n          { x: \"x\", y: \"density\", stroke: \"blue\" }\n        )\n      : null,\n  ].filter((d) => d !== null),\n});\n\n// Function to compute kernel density estimate\nfunction densityEstimate(values, bwAdjust) {\n  const kde = kernelDensityEstimator(\n    kernelEpanechnikov(0.2 * bwAdjust), // Kernel function\n    d3.scaleLinear().domain(d3.extent(values)).ticks(200) // Evaluate KDE at 200 equally spaced points\n  );\n  return kde(values);\n}\n\n// Kernel density estimator function\nfunction kernelDensityEstimator(kernel, X) {\n  return function (sample) {\n    return X.map((x) => ({\n      x: x,\n      density: d3.mean(sample, (v) => kernel(x - v)), // Adjusted scaling\n    }));\n  };\n}\n\n// Epanechnikov kernel function\nfunction kernelEpanechnikov(bandwidth) {\n  return function (u) {\n    return Math.abs(u /= bandwidth) <= 1 ? (0.75 * (1 - u * u)) / bandwidth : 0;\n  };\n}\n\n// Deterministic jitter function because Math.random() doesn't support seeds\nfunction jitter(value, range) {\n  const hash = Math.sin(value) * 10000; // Generate pseudo-random hash based on value\n  return (hash - Math.floor(hash)) * range; // Scale hash to the desired range\n}\n```\n\n### With webR\n\n::: {.callout-tip}\n### MAGIC\n\nThis required literally 8 minutes of reading the documentation.\n:::\n\nHere's OJS code for creating the interactive inputs:\n\n```{ojs}\nviewof nbins_r = Inputs.select(\n  [10, 20, 35, 50],\n  {label: \"Number of bins\"}\n)\n\nviewof individual_obs_r = Inputs.toggle({\n  label: \"Show individual observations\",\n  value: false\n})\n\nviewof density_r = Inputs.toggle({\n  label: \"Show density estimate\",\n  value: false\n})\n\nviewof bw_adjust_r = density_r \n  ? Inputs.range([0.2, 2], {\n      label: \"Bandwidth adjustment:\",\n      step: 0.2,\n      value: 1\n    })\n  : html`<input type=\"range\" value=\"1\" style=\"display:none\">`\n```\n\n\n::: {.cell autorun='true' input='[\"nbins_r\",\"individual_obs_r\",\"density_r\",\"bw_adjust_r\"]'}\n```{webr}\n#| autorun: true\n#| echo: false\n#| input:\n#|   - nbins_r\n#|   - individual_obs_r\n#|   - density_r\n#|   - bw_adjust_r\n\nhist(\n  faithful$eruptions,\n  probability = TRUE,\n  breaks = as.numeric(nbins_r),\n  xlab = \"Duration (minutes)\",\n  main = \"Geyser eruption duration\"\n)\n\nif (individual_obs_r) {\n  rug(faithful$eruptions)\n}\n\nif (density_r) {\n  dens <- density(faithful$eruptions, adjust = bw_adjust_r)\n  lines(dens, col = \"blue\")\n}\n```\n:::\n\n\nThis is the R code for connecting to those OJS inputs and using them live:\n\n<details>\n<summary>Code</summary>\n\n```{{webr}}\n#| autorun: true\n#| echo: false\n#| input:\n#|   - nbins_r\n#|   - individual_obs_r\n#|   - density_r\n#|   - bw_adjust_r\n\nhist(\n  faithful$eruptions,\n  probability = TRUE,\n  breaks = as.numeric(nbins_r),\n  xlab = \"Duration (minutes)\",\n  main = \"Geyser eruption duration\"\n)\n\nif (individual_obs_r) {\n  rug(faithful$eruptions)\n}\n\nif (density_r) {\n  dens <- density(faithful$eruptions, adjust = bw_adjust_r)\n  lines(dens, col = \"blue\")\n}\n```\n\n<details>\n\n## This works with ggplot too!\n\n\n::: {.cell max-lines='10' input='[\"species_filter\",\"x_var\",\"y_var\",\"color_var\",\"show_trend_species\",\"show_trend_overall\"]'}\n```{webr}\n#| max-lines: 10\n#| input:\n#|   - species_filter\n#|   - x_var\n#|   - y_var\n#|   - color_var\n#|   - show_trend_species\n#|   - show_trend_overall\npenguins_filtered <- palmerpenguins::penguins |>\n  filter(if (length(species_filter) > 0) species %in% species_filter else TRUE) |>\n  drop_na(all_of(c(x_var, y_var)))\n\np <- ggplot(penguins_filtered, aes(x = .data[[x_var]], y = .data[[y_var]])) +\n  geom_point(aes(color = .data[[color_var]]), size = 3, alpha = 0.7) +\n  labs(\n    title = \"Penguins! 🐧\",\n    x = x_var,\n    y = y_var,\n    color = color_var\n  ) +\n  theme_minimal()\n\nif (show_trend_species) {\n  p <- p + \n    geom_smooth(\n      aes(color = .data[[color_var]]), \n      method = \"lm\", se = FALSE, formula = 'y ~ x'\n    )\n}\n\nif (show_trend_overall) {\n  p <- p + \n    geom_smooth(\n      color = \"#FF851B\", \n      method = \"lm\", se = FALSE, formula = 'y ~ x'\n    )\n}\n\np\n```\n:::\n\n\n\nHere's OJS code for creating the interactive inputs:\n\n```{ojs}\nnumeric_vars = [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"]\ncategorical_vars = [\"species\", \"island\", \"sex\"]\n\nviewof species_filter = Inputs.checkbox(\n  [\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n  {label: \"Species to include\", value: [\"Adelie\", \"Chinstrap\", \"Gentoo\"]}\n)\n\nviewof x_var = Inputs.select(numeric_vars, {\n  label: \"X Variable\",\n  value: \"bill_length_mm\"\n})\n\nviewof y_var = Inputs.select(numeric_vars, {\n  label: \"Y Variable\",\n  value: \"bill_depth_mm\"\n})\n\nviewof color_var = Inputs.select(categorical_vars, {\n  label: \"Color by\",\n  value: \"species\"\n})\n\nviewof show_trend_species = Inputs.toggle({\n  label: \"Show species trends\",\n  value: false\n})\n\nviewof show_trend_overall = Inputs.toggle({\n  label: \"Show overall trend\",\n  value: false\n})\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script type=\"ojs-define\">\n{\"contents\":[{\"name\":\"faithful\",\"value\":{\"eruptions\":[3.6,1.8,3.333,2.283,4.533,2.883,4.7,3.6,1.95,4.35,1.833,3.917,4.2,1.75,4.7,2.167,1.75,4.8,1.6,4.25,1.8,1.75,3.45,3.067,4.533,3.6,1.967,4.083,3.85,4.433,4.3,4.467,3.367,4.033,3.833,2.017,1.867,4.833,1.833,4.783,4.35,1.883,4.567,1.75,4.533,3.317,3.833,2.1,4.633,2,4.8,4.716,1.833,4.833,1.733,4.883,3.717,1.667,4.567,4.317,2.233,4.5,1.75,4.8,1.817,4.4,4.167,4.7,2.067,4.7,4.033,1.967,4.5,4,1.983,5.067,2.017,4.567,3.883,3.6,4.133,4.333,4.1,2.633,4.067,4.933,3.95,4.517,2.167,4,2.2,4.333,1.867,4.817,1.833,4.3,4.667,3.75,1.867,4.9,2.483,4.367,2.1,4.5,4.05,1.867,4.7,1.783,4.85,3.683,4.733,2.3,4.9,4.417,1.7,4.633,2.317,4.6,1.817,4.417,2.617,4.067,4.25,1.967,4.6,3.767,1.917,4.5,2.267,4.65,1.867,4.167,2.8,4.333,1.833,4.383,1.883,4.933,2.033,3.733,4.233,2.233,4.533,4.817,4.333,1.983,4.633,2.017,5.1,1.8,5.033,4,2.4,4.6,3.567,4,4.5,4.083,1.8,3.967,2.2,4.15,2,3.833,3.5,4.583,2.367,5,1.933,4.617,1.917,2.083,4.583,3.333,4.167,4.333,4.5,2.417,4,4.167,1.883,4.583,4.25,3.767,2.033,4.433,4.083,1.833,4.417,2.183,4.8,1.833,4.8,4.1,3.966,4.233,3.5,4.366,2.25,4.667,2.1,4.35,4.133,1.867,4.6,1.783,4.367,3.85,1.933,4.5,2.383,4.7,1.867,3.833,3.417,4.233,2.4,4.8,2,4.15,1.867,4.267,1.75,4.483,4,4.117,4.083,4.267,3.917,4.55,4.083,2.417,4.183,2.217,4.45,1.883,1.85,4.283,3.95,2.333,4.15,2.35,4.933,2.9,4.583,3.833,2.083,4.367,2.133,4.35,2.2,4.45,3.567,4.5,4.15,3.817,3.917,4.45,2,4.283,4.767,4.533,1.85,4.25,1.983,2.25,4.75,4.117,2.15,4.417,1.817,4.467],\"waiting\":[79,54,74,62,85,55,88,85,51,85,54,84,78,47,83,52,62,84,52,79,51,47,78,69,74,83,55,76,78,79,73,77,66,80,74,52,48,80,59,90,80,58,84,58,73,83,64,53,82,59,75,90,54,80,54,83,71,64,77,81,59,84,48,82,60,92,78,78,65,73,82,56,79,71,62,76,60,78,76,83,75,82,70,65,73,88,76,80,48,86,60,90,50,78,63,72,84,75,51,82,62,88,49,83,81,47,84,52,86,81,75,59,89,79,59,81,50,85,59,87,53,69,77,56,88,81,45,82,55,90,45,83,56,89,46,82,51,86,53,79,81,60,82,77,76,59,80,49,96,53,77,77,65,81,71,70,81,93,53,89,45,86,58,78,66,76,63,88,52,93,49,57,77,68,81,81,73,50,85,74,55,77,83,83,51,78,84,46,83,55,81,57,76,84,77,81,87,77,51,78,60,82,91,53,78,46,77,84,49,83,71,80,49,75,64,76,53,94,55,76,50,82,54,75,78,79,78,78,70,79,70,54,86,50,90,54,54,77,79,64,75,47,86,63,85,82,57,82,67,74,54,83,73,73,88,80,71,83,56,79,78,84,58,83,43,60,75,81,46,90,46,74]}}]}\n</script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}