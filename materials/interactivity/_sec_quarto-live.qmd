# webR and<br>Quarto Live {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

## R in the browser

[webR](https://docs.r-wasm.org/webr/latest/) is a special version of R that's compiled for Javascript and Node.js using WebAssembly

. . .

\ 

::: {.callout-tip}

#### tl;dr

Through compiled Javascript magic, you can run R in your browser.

:::

. . .

\ 

[Quarto Live](https://r-wasm.github.io/quarto-live/) makes it trivial to use (and it works with Python and [Pyodide](https://pyodide.org/en/stable/))

## Enabling webR

Install the extension:

```{.bash filename="Terminal" code-line-numbers="false"}
quarto add r-wasm/quarto-live
```

. . .

\ 

Use special format and include special file (for now)

```{.yaml code-line-numbers="false"}
---
format: live-html
engine: knitr
---

{{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}}
```

::: {.footer}
Documentation: <https://r-wasm.github.io/quarto-live/getting_started/installation.html>
:::

## Using webR

Make `webr` chunks

````{.markdown}
```{{webr}}
mean(1:5)
plot(1:10)
```
````

```{webr}
mean(1:5)
plot(1:10)
```


## Install packages

You don't have access to *every* package on CRAN; packages have to be compiled for WebAssembly/Javascript (many/most are though!)

Packages come from the [webR public package repository](https://repo.r-wasm.org)

```{.yaml}
---
format: live-html
webr:
  packages:
    - dplyr
    - palmerpenguins
    - ggplot2
---
```

::: {.footer}
Documentation: <https://r-wasm.github.io/quarto-live/getting_started/packages.html>
:::

## Teaching with webR

````{.markdown filename="exercise.qmd"}
Fill in the blank to fill the density plots by species

```{{webr}}
#| exercise: ex_1
ggplot(palmerpenguins::penguins, aes(x = body_mass_g)) +
  geom_density(aes(______), alpha = 0.7)
```
````

```{webr}
#| exercise: ex_1
ggplot(palmerpenguins::penguins, aes(x = body_mass_g)) +
  geom_density(aes(______), alpha = 0.7)
```

## More with exercises

- [R for Data Science exercises and lessons](https://r-primers.andrewheiss.com/)

- ["Grade" exercises and provide feedback](https://r-wasm.github.io/quarto-live/exercises/exercises.html)

## Use OJS to interact with live R

::: {style="text-align: center; font-size: 1.4em; margin-top: 2em;"}
**Replicate/replace basic Shiny apps!**
:::

## Old Faithful app

[Classic Old Faithful Shiny example](https://gallery.shinyapps.io/083-front-page/)

![](img/faithful-shiny.png){fig-align="center" style="box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;"}

## Old Faithful app with OJS {.smaller}

*(2 hours fighting with Claudeâ€¦)*; see website for full code

```{r}
ojs_define(faithful = faithful)
```

```{ojs}
faithful_js = transpose(faithful)

viewof nbins = Inputs.select(
  [10, 20, 35, 50],
  {label: "Number of bins"}
)

viewof individual_obs = Inputs.checkbox(["Show individual observations"], {
  value: []
})

viewof density = Inputs.checkbox(["Show density estimate"], {
  value: []
})

viewof bw_adjust = Inputs.range([0.2, 2], {
  label: "Bandwidth adjustment:",
  step: 0.2,
  value: 1
})
```

```{ojs}
Plot.plot({
  height: 300,
  y: { label: "Density" },
  x: { label: "Duration (minutes)" },
  marks: [
    // Probability-based histogram
    Plot.rectY(
      faithful_js,
      Plot.binX(
        { y: (bin, { x1, x2 }) => bin.length / faithful_js.length / (x2 - x1) }, // Normalize to probability density
        { x: "eruptions", thresholds: nbins } // Use nbins for threshold count
      )
    ),

    // Zero line
    Plot.ruleY([0]),

    // Individual observations
    // Individual observations (separate layer for ticks)
    individual_obs.length > 0
      ? Plot.dot(faithful_js, {
          x: "eruptions",
          y: (d) => jitter(d.eruptions, 0.05), // Deterministic jitter based on data
          // y: () => Math.random() * 0.05, // Jitter points randomly along the y-axis
          stroke: "white",
          fill: "red",
        })
      : null,

    // Density line
    density.length > 0
      ? Plot.line(
          densityEstimate(
            faithful_js.map((d) => d.eruptions),
            bw_adjust // Bandwidth adjustment
          ),
          { x: "x", y: "density", stroke: "blue" }
        )
      : null,
  ].filter((d) => d !== null),
});

// Function to compute kernel density estimate
function densityEstimate(values, bwAdjust) {
  const kde = kernelDensityEstimator(
    kernelEpanechnikov(0.2 * bwAdjust), // Kernel function
    d3.scaleLinear().domain(d3.extent(values)).ticks(200) // Evaluate KDE at 200 equally spaced points
  );
  return kde(values);
}

// Kernel density estimator function
function kernelDensityEstimator(kernel, X) {
  return function (sample) {
    return X.map((x) => ({
      x: x,
      density: d3.mean(sample, (v) => kernel(x - v)), // Adjusted scaling
    }));
  };
}

// Epanechnikov kernel function
function kernelEpanechnikov(bandwidth) {
  return function (u) {
    return Math.abs(u /= bandwidth) <= 1 ? (0.75 * (1 - u * u)) / bandwidth : 0;
  };
}

// Deterministic jitter function because Math.random() doesn't support seeds
function jitter(value, range) {
  const hash = Math.sin(value) * 10000; // Generate pseudo-random hash based on value
  return (hash - Math.floor(hash)) * range; // Scale hash to the desired range
}
```

## Old Faithful app with webR {.smaller}

*(8 minutes reading the documentation)*; see website for full code

```{ojs}
//| echo: false
viewof nbins_r = Inputs.select(
  [10, 20, 35, 50],
  {label: "Number of bins"}
)

viewof individual_obs_r = Inputs.toggle({
  label: "Show individual observations",
  value: false
})

viewof density_r = Inputs.toggle({
  label: "Show density estimate",
  value: false
})

viewof bw_adjust_r = density_r 
  ? Inputs.range([0.2, 2], {
      label: "Bandwidth adjustment:",
      step: 0.2,
      value: 1
    })
  : html`<input type="range" value="1" style="display:none">`
```

```{webr}
#| autorun: true
#| echo: false
#| input:
#|   - nbins_r
#|   - individual_obs_r
#|   - density_r
#|   - bw_adjust_r

hist(
  faithful$eruptions,
  probability = TRUE,
  breaks = as.numeric(nbins_r),
  xlab = "Duration (minutes)",
  main = "Geyser eruption duration"
)

if (individual_obs_r) {
  rug(faithful$eruptions)
}

if (density_r) {
  dens <- density(faithful$eruptions, adjust = bw_adjust_r)
  lines(dens, col = "blue")
}
```


## Our turn {background-color='{{< brand color orange >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

{{< include _our-turn_webr.qmd >}}

```{r}
#| label: clock-webr
#| echo: false
countdown::countdown(minutes = 20)
```
