# Branding {background-color='{{< brand color red >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

## CSS is a little inconvenient

::: {.incremental}
- HTML, slides, and dashboards all use slighlty different underlying HTML
- No easy way to reuse the colors and typography from your CSS customizations in R and Python plots or in PDF documents
- Hard to share consistent, resusable themes with others in your organization (or with the world)
:::

## Style guides

![](img/urban-institute.png){fig-align="center" width="100%" style="box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;"}

::: {.footer}
[Urban Institute Data Visualization Style Guide](https://urbaninstitute.github.io/graphics-styleguide/){target="_blank"}
:::

## Style guides

![](img/uga.png){fig-align="center" width="100%" style="box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;"}

::: {.footer}
[University of Georgia Brand Style Guide](https://brand.uga.edu/visual-identity/visual-style/#typography){target="_blank"}
:::

## Style guides

![](img/gsu.png){fig-align="center" width="100%" style="box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;"}

::: {.footer}
[Georgia State University Web Color Guidelines](https://commkit.gsu.edu/website-management/web-color-guidelines/){target="_blank"}
:::

## Matching style with CSS

You can recreate styles with CSS ([site](https://aysps.github.io/2024-aysps-dataviz/){target="_blank"}; [custom.scss](https://github.com/aysps/2024-aysps-dataviz/blob/main/custom.scss){target="_blank"})

![](img/ays-dataviz.png){fig-align="center" width="100%" style="box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;"}

## 

![](img/brand-yml.png){fig-align="center" width="50%"}

::: {style="text-align: center; padding-top: 0.5em;"}
[Unified branding with a simple YAML file]{style="font-size: 1.2em;"} 
:::

. . .

::: {style="text-align: center; padding-top: 1em; font-size: 0.85em;"}
Create reports, apps, dashboards, plots and more that match your organization's brand guidelines with a single `_brand.yml` file.
:::

::: footer
Learn more: <https://posit-dev.github.io/brand-yml/>
:::

## 

::: {.fragment}
[1. Define branding in a single `_brand.yml` file.]{style="font-size: 1.5em;"}

[2. Apply that branding across almost all Quarto formats.]{style="font-size: 1.5em;"} 

:::

## `_brand.yml` elements

::: {.incremental}
- `meta`: Identifying information, name of the company, URLs, etc.
- `logo`: Files or links to the brandâ€™s logos
- `color`: Colors in the brand's color palette
- `typography`: Fonts for different elements
- `defaults`: Additional context-specific settings
:::

## `_brand.yml` structure

```{.yaml code-line-numbers="1-4|6-11|13-30|32-51|53-72" filename="_brand.yml"}
meta:
  name: Urban Institute
  link:
    home: https://urbaninstitute.github.io/graphics-styleguide/

logo:
  images:
    icon:
      path: img/urban.png
      alt: Urban Institute logo
  small: img/urban-sm.png

color:
  palette:
    blue: "#1696d2"
    gray-light: "#d2d2d2"
    black: "#000000"
    yellow: "#fdbf11"
    magenta: "#ec008b"
    green: "#55b748"
    gray-dark: "#5c5859"
    red: "#db2b27"
    orange: "#e88e2d"
    white: "#ffffff"

  background: white
  foreground: gray-dark
  primary: blue
  secondary: yellow
  dark: black

typography:
  fonts:
    - family: Lato
      source: google
      weight: [400, 700]
    - family: Jost
      source: google
      weight: [400, 700]

  base:
    family: Lato
    weight: 400

  headings:
    family: Jost
    weight: 700

  link:
    color: primary
    decoration: none

defaults:
  bootstrap:
    functions: # string with SCSS functions
    defaults:  # list of Bootstrap Sass variables to override
      link-hover-color: $brand-magenta
    mixins:    # string with SCSS mixins
    rules: |   # string with SCSS rules
      #quarto-content h2, #quarto-content h3 {
          text-transform: uppercase;
          letter-spacing: 1px;
      }

      .content .highlight {
          color: $brand-yellow;
      }

      .navbar-title {
          font-family: Jost;
          font-weight: 700;
      }

```

## Enabling `_brand.yml` in Quarto

1. Define branding in ` _brand.yml`.
2. Save in the root directory of your Quarto project.

Quarto will detect the presence of `_brand.yml` and automatically apply the brand to all documents of the supported formats in the project.

## 

If your brand file has a different name or lives in a subdirectory, use the `brand` key.

```{.yaml code-line-numbers="4" filename="my-document.qmd"}
---
title: "My neat report"
format: html
brand: org_theme.yml
---
```

## Disable `_brand.yml`

To turn off `_brand.yml` for a document, use `brand: false`.

```{.yaml code-line-numbers="4" filename="my-document.qmd"}
---
title: "My neat report"
format: html
brand: false
---
```

## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

{{< include _your-turn_branding1.qmd >}}

```{r}
#| label: brand-clock
#| echo: false
# 5 minutes, warning at 1 minute
countdown::countdown(minutes = 5, seconds = 0, play_sound = TRUE, warn_when = 1 * 60)
```

## Use `_brand.yml` in markdown

Access some `_brand.yml` values in Quarto documents with a shortcode

``` {.markdown filename="my_document.qmd"}
{{{< brand color primary >}}}
```

::: {.footer}
Learn more: <https://quarto.org/docs/authoring/brand.html#using-brand-values>
:::


## Use `_brand.yml` in Sass

Access some `_brand.yml` values with the `$brand-*` prefix

```{.css filename="custom-styles.scss"}
/*-- scss:rules --*/

h3 {
  color: $brand-magenta;
}
```

::: {.footer}
Learn more: <https://quarto.org/docs/authoring/brand.html#in-scss>
:::

## Use `_brand.yml` in R and Python

Access and apply specific brand elements

::: {.panel-tabset}
### R

```{.r}
library(brand.yml)

brand <- read_brand_yml("_brand.yml")

brand$color$primary
#> [1] "#1696d2"

brand$color$palette$yellow
#> [1] "#fdbf11"

brand$typography$fonts[[1]]$family
#> [1] "Lato"
```

### Python

```{.python}
from brand_yml import Brand

brand = Brand.from_yaml("_brand.yml")

brand.color.primary
```
:::


## Theme helpers

The {quarto} package contains theme helpers that apply branding to plots

::: {.panel-tabset}
### R

```{.r}
library(quarto)

my_theme <- theme_brand_ggplot2("_brand.yml")
```

### Python

```{.python}
from quarto import theme_brand_plotnine

my_theme = theme_brand_plotnine('_brand.yml')
```

:::

::: {.aside}
Doesn't do much (yet) beyond using the brand's `background` and `foreground` colors in the plot
:::

::: {.footer}
[R + {ggplot2}](https://quarto-dev.github.io/quarto-r/articles/theme-helpers.html) and [Python + plotnine](https://github.com/quarto-dev/quarto-python?tab=readme-ov-file#theme-helpers) documentation
:::

## Example plot

```{.r}
library(tidyverse)
library(brand.yml)

brand <- read_brand_yml("_brand.yml")

brand_theme <- quarto::theme_brand_ggplot2("_brand.yml") +
  theme(
    text = element_text(family = brand$typography$fonts[[1]]$family, size = 11)
  )

ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
  geom_point() +
  labs(title = "A plot") +
  scale_color_manual(
    values = c(
      brand$color$palette$blue,
      brand$color$palette$black,
      brand$color$palette$yellow
    )
  ) +
  brand_theme
```

##

![](img/unnamed-chunk-1-1.png)

## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

{{< include _your-turn_branding2.qmd >}}

```{r}
#| label: clock-5
#| echo: false
# 5 minutes, warning at 1 minute
countdown::countdown(minutes = 5, seconds = 0, play_sound = TRUE, warn_when = 1 * 60)
```

## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

{{< include _your-turn_branding3.qmd >}}

```{r}
#| label: clock-6
#| echo: false
# 5 minutes, warning at 1 minute
countdown::countdown(minutes = 5, seconds = 0, play_sound = TRUE, warn_when = 1 * 60)
```

## Make your own `_brand.yml`

- In RStudio, go to File \> New File \> Text file
- In Positron or VS Code, use the Explorer panel to add a new file.

Save the file as `_brand.yml`

. . .

\ 

Or create a [Brand Extension](https://quarto.org/docs/extensions/brand.html){target="_blank"} for sharing and distributing your brand

## Don't reinvent the wheel!

**DO NOT** try to write a `_brand.yml` from scratch! 

Look at [the "Inspiration" page](https://posit-dev.github.io/brand-yml/inspiration/)!

![](img/brand-inspiration.png){fig-align="center" width="100%" style="box-shadow: 5px 5px 15px rgba(0, 0, 0, 0.3); border-radius: 5px;"}

::: footer
Learn more: <https://posit-dev.github.io/brand-yml/inspiration/>
:::

## Your turn {background-color='{{< brand color cyan >}}' background-image='../../img/background-hex-shapes.svg' background-opacity='0.5'}

{{< include _your-turn_branding4.qmd >}}

```{r}
#| label: clock-7
#| echo: false
# 5 minutes, warning at 1 minute
countdown::countdown(minutes = 5, seconds = 0, play_sound = TRUE, warn_when = 1 * 60)
```
